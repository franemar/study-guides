{| class="wikitable" 
|-
! 
! scope="col"| sml
! scope="col"| ocaml
! scope="col"| f#
! scope="col"| haskell
|-
! scope="row"| version used<br />
| SML NJ 110
| 4
| F# 3.0<br />Mono 3.2
| 7.4
|-
! scope="row"| show version<br />
| displayed at startup
| $ <code>ocaml -version</code>
| $ <code>fsharpi –help</code>
| $ <code>ghc –version</code>
|-
! scope="row"|  grammar and invocation
| 
| 
| 
| 
|-
| 
| sml
| ocaml
| f#
| haskell
|-
! scope="row"| interpreter<br />
| 
| $ <code>echo 'print_endline "hello"' > hello.ml</code><br /><br />$ <code>ocaml hello.ml</code>
| $ <code>cat <nowiki><<EOF ></nowiki> hello.fs<br />module hello<br />let main = printfn "hello"<br />EOF</code><br /><br />$ <code>fsharpi --quiet --exec hello.fs</code>
| $ <code>echo 'main = putStrLn "hello"' > hello.hs</code><br /><br />$ <code>runghc hello.hs</code>
|-
| shebang
| 
| $ cat <<EOF > hello.ml<br />#!/usr/bin/env ocaml<br /><br />print_endline "hello";;<br />EOF<br /><br />$ chmod +x hello.ml<br />$ ./hello.ml
| $ cat <<EOF > hello.fs<br />#light (*<br />  exec fsharpi --exec $0 --quiet<br />*)<br /><br />module hello<br /><br />printfn "hello"<br />EOF<br /><br />$ chmod +x hello.fs<br />$ ./hello.fs
| $ cat <<EOF > hello.hs<br />#!/usr/bin/env runghc<br /><br />main = putStrLn "hello"<br />EOF<br /><br />$ chmod +x hello.hs<br />$ ./hello.hs
|-
| bytecode compiler and interpreter
| 
| $ echo 'print_endline "hello";;' > hello.ml<br />$ ocamlc -o hello hello.ml<br />$ ocamlrun hello
| $ echo 'printfn "hello"' > hello.fs<br />$ fsharpc hello.fs<br />$ mono hello.exe
| none
|-
| native compiler
| 
| $ echo 'print_endline "hello";;' > hello.ml<br />$ ocamlopt hello.ml -o hello<br />$ ./hello
| none
| $ echo 'main = putStrLn "hello"' > hello.hs<br />$ ghc -o hello hello.hs<br />$ ./hello
|-
| library which is always imported
| 
| Pervasives
| Core
| Prelude
|-
| statement terminator
| ;
| ;;
| ;;
| next line has equal or less indentation, or ;
|-
| blocks
| ( expr ; … )
| ( expr ; … )<br />begin expr ; … end
| ( expr ; … )<br />begin expr ; … end
| offside rule or { }
|-
| end-of-line comment
| none
| none
| // comment
| -- comment
|-
| multiple line comment
| (* comment<br />another comment *)
| (* comment<br />another comment *)
| (* comment<br />another comment *)
| {- comment<br />another comment -}
|-
| variables and expressions
| 
| 
| 
| 
|-
| 
| sml
| ocaml
| f#
| haskell
|-
| write-once variable<br />
| val a = 3;
| let n = 1 + 2;;
| let n = 1 + 2
| n = 3
|-
| modifiable variable
| val a = ref 3;<br />a := 4;<br />!a + 7;
| let n = ref 3;;<br />n := 4;;<br />!n + 7;;
| let n = ref 3<br />n := 4<br />!n + 7
| n <- return 3
|-
| unit type and value
| unit<br />()
| unit<br />()
| unit<br />()
| ()<br />()
|-
| conditional expression
| val x = 3;<br />if x < 0 then ~x else x;
| let n = -3;;<br />let absn = if n < 0 then -n else n;;
| let n = -3<br />let absn = if n < 0 then -n else n
| n = -3<br />let absn = if n < 0 then -n else n
|-
| branch type mismatch
| (* compilation error: *)<br />if true then "hello" else 3;
| (* compilation error: *)<br />if true then "hello" else 3;;
| (* compilation error: *)<br />if true then "hello" else 3
| -- compilation error:<br />if True then "hello" else 3
|-
| null<br />
| NONE
| None
| None<br /><br />Also this value returned by .NET library functions. It has a type distinct from None:<br />null
| Nothing
|-
| nullable type
| type list_option_int = int option list;<br /><br />val list = [SOME 3,NONE, SOME ~4];
| type list_option_int = int option list;;<br /><br />let list = [Some 3; None; Some (-4)];;
| 
| list = [Just(3), Nothing, Just(-4)]
|-
| null test
| 
| match foo with<br />  | None -> true<br />  | _ -> false;;
| 
| 
|-
| coalesce
| val foo = SOME 3;<br /><br />(* raises exception if NONE: *)<br />valOf foo;<br /><br />(* evaluates to 0 if NONE: *)<br />getOpt (foo, 0);
| match foo with<br />  | None -> 0<br />  | Some n -> n;;
| 
| import Data.Maybe<br /><br />let foo = Just(3)<br />raises exception if Nothing:<br />fromJust foo<br /><br />let intId x = x<br />evaluates to 0 if Nothing:<br />maybe 0 intId foo
|-
| nullif
| 
| match foo with<br />  | -999 -> None<br />  | n -> Some n;;
| 
| 
|-
| expression type declaration
| 
| float 1
| float 1
| 1 :: Double
|-
| let ... in ...
| val z =<br />let<br />  val x = 3.0<br />  val y = 2.0 * x<br />in<br />  x * y<br />end;
| let z =<br />  let x = 3.0 in<br />  let y = 2.0 *. x in<br />  x *. y;;
| let z =<br />  let x = 3.0 in<br />  let y = 2.0 * x in<br />  x * y
| z = let x = 3.0<br />        y = 2.0 * x<br />    in x * y
|-
| where
| none
| none
| none
| z = x * y<br />  where x = 3.0<br />        y = 2.0 * x
|-
| arithmetic and logic
| 
| 
| 
| 
|-
| 
| sml
| ocaml
| f#
| haskell
|-
| boolean type<br />
| bool
| bool
| bool
| Bool
|-
| true and false<br />
| true false
| true false
| true false
| True False
|-
| logical operators
| andalso orelse not
| && || not
| && || not
| && || not
|-
| relational operators
| Err:510
| Err:510
| Err:510
| Err:510
|-
| min and max
| 
| min 1 2<br />max 1 2
| min 1 2<br />max 1 2
| min 1 2<br />max 1 2
|-
| integer type
| int
| int<br /><br />other integer types:<br />int32 int64 nativeint
| int<br /><br />other integer types:<br />int32 int64 nativeint
| Integer
|-
| integer literal
| negative integer:<br />~4
| int, int64, and nativeint literals:<br />12 12L 12n<br /><br />literals can contain underscores:<br />1_000_000<br /><br />this parses as an expression:<br />-4
| -4
| an expression, not a literal:<br />-4
|-
| float type
| real
| float
| float
| Double
|-
| integer operators
| + - * div mod
| + - * / mod<br />mod //is an infix operator
| + - * / %
| + - * div rem<br />div and rem are functions, not infix operators
|-
| float operators<br />
| + - * /
| +. -. *. /.
| + - * /
| + - * /
|-
| add integer and float
| real 3 + 7.0;
| float 3 +. 7.0
| float 3 + 7.0
| 3 + 7.0
|-
| integer division<br />and remainder
| 7 div 3<br />7 mod 3<br />real 7 / real 3
| 7 / 3<br />7 mod 3
| 7 / 3<br />7 % 3
| div 7 3<br />rem 7 3
|-
| integer division by zero
| 
| raises Division_by_zero
| System.DivideByZeroException
| Exception: divide by zero
|-
| float division<br />
| 
| float 7 /. float 3
| float 7 / float 3
| 7 / 3
|-
| float division by zero
| 
| infinity nan or neg_infinity
| infinity nan or neg_infinity
| evaluates to Infinity, NaN, or -Infinity, values which do not have literals
|-
| power
| Math.pow (2.0, 32.0);
| 2.0 ** 32.0
| 2.0 ** 32.0
| 2 ** 32<br /><br />-- syntax error if exponent not an integer:<br />2 ^ 32
|-
| sqrt<br />
| Math.sqrt 2.0
| sqrt 2.0
| sqrt 2.0
| sqrt 2
|-
| sqrt -1
| Math.sqrt ~1.0 evaluates to nan
| sqrt (-1.0):<br />nan
| nan
| sqrt (-1) evaluates to NaN, a value which has no literal
|-
| transcendental functions
| Math.exp Math.ln<br />Math.sin Math.cos Math.tan<br />Math.asin Math.acos Math.atan<br />Math.atan2
| exp log<br />sin cos tan<br />asin acos atan<br />atan2
| exp log<br />sin cos tan<br />asin acos atan<br />atan2
| exp log<br />sin cos tan<br />asin acos atan<br />atan2
|-
| transcendental constants
| Math.pi<br />Math.e
| 4.0 *. atan 1.0<br />exp 1.0
| System.Math.PI<br />System.Math.E
| pi<br />exp 1
|-
| float truncation
| round 3.14<br />trunc 3.14<br />floor 3.14<br />ceil 3.14
| truncate 3.14<br />none<br />floor 3.14 returns float<br />ceil 3.14 returns float
| truncate 3.14<br />round 3.14<br />floor 3.14 returns float<br />ceil 3.14 returns float
| truncate 3.14<br />round 3.14<br />floor 3.14<br />ceiling 3.14
|-
| absolute value<br />and signum
| 
| abs (-7)<br />abs_float (-7.0)<br />no signum
| abs -7<br />abs -7.0<br />sign -7<br />sign -7.0
| abs (-7)<br />signum (-7)
|-
| integer overflow
| Overflow exception
| modular arithmetic
| modular arithmetic
| has arbitrary length integers
|-
| float overflow
| 
| infinity
| infinity
| evaluates to Infinity, a value which has no literal
|-
| arbitrary length integer
| 
| open Big_int;;<br /><br />let n = big_int_of_int 7;;<br />let m = big_int_of_int 12;;
| // System.Numerics.BigInteger:<br />let n = 7I<br />let m = 12I
| -- Integer is arbitrary length type:<br />let n = 7<br />let m = 12
|-
| arbitrary length integer operators
| 
| add_big_int n m<br />sub_big_int n m<br />mult_big_int n m<br />div_big_int n m (* quotient *)<br />mod_big_int n m<br /><br />eq_big_int n m<br />lt_big_int n m<br />gt_big_int n m<br />le_big_int n m<br />ge_big_int n m
| n + m<br />n - m<br />n * m<br />n / m<br />n % m<br /><br />n = m<br />n < m<br />n < m<br />n <= m<br />n >= m
| n + m<br />n - m<br />n * m<br />div n m<br />mod n m<br /><br />n == m<br />n < m<br />n < m<br />n <= m<br />n >= m
|-
| rational type
| 
| 
| 
| Ratio Integer
|-
| rational construction
| 
| 
| 
| import Data.Ratio<br /><br />1 % 7
|-
| rational decomposition
| 
| 
| 
| import Data.Ratio<br /><br />numerator (1 % 7)<br />denominator (1 % 7)
|-
| complex type
| 
| Complex.t
| 
| Complex Double
|-
| complex constants
| 
| Complex.zero<br />Complex.one<br />Complex.i
| 
| 
|-
| complex operators
| 
| Complex.add z w;;<br />Complex.sub z w;;<br />Complex.mul z w;;<br />Complex.div z w;;
| 
| 
|-
| complex construction
| 
| {Complex.re=1.0; Complex.im=2.0}
| System.Numerics.Complex(1.0, 2.0)
| import Data.Complex<br /><br />1 :+ 2.0
|-
| complex decomposition
| 
| let z = {Complex.re=1.0; Complex.im=2.0};;<br /><br />z.Complex.re;;<br />z.Complex.im;;<br />Complex.arg z;;<br />Complex.norm z;;<br />Complex.conj z;;
| 
| import Data.Complex<br /><br />realPart (1 :+ 2)<br />imagPart (1 :+ 2)<br />phase (1 :+ 2)<br />magnitude (1 :+ 2)<br />conjugate (1 :+ 2)
|-
| random number<br />uniform int, uniform float, normal float
| 
| Random.int 100<br />Random.float 1.0<br />none
| let rnd = System.Random()<br /><br />rnd.Next(0, 100)<br />rnd.NextDouble()<br />none
| -- $ cabal install random<br />import System.Random<br /><br />getStdRandom (randomR (0, 99))<br />getStdRandom (randomR (0.0, 1.0))<br />none
|-
| random seed<br />set, get, restore
| 
| Random.init 17;;<br />let seed = Random.get_state();;<br />Random.set_state seed;;
| let rnd = System.Random(17)<br />none<br />none
| -- $ cabal install random<br />import System.Random<br /><br />setStdGen $ mkStdGen 17<br />seed <- getStdGen<br />setStdGen seed
|-
| bit operators
| 
| 1 lsl 4<br />1 lsr 4<br />1 land 3<br />1 lor 3<br />1 lxor 3<br />lnot 1
| 1 <<< 4<br />1 >>> 4<br />1 &&& 3<br />1 ||| 3<br />1 ^^^ 3<br />~~~ 1
| import Data.Bits<br /><br />x = 1 :: Integer<br />y = 3 :: Integer<br /><br />shiftL x 4<br />shiftR x 4<br />x .&. y<br />x .|. y<br />xor x y<br />complement x
|-
| binary, octal, and hex literals
| 
| 0b101010<br />0o52<br />0x2a
| 0b101010<br />0o52<br />0x2a
| none<br />052<br />0x2a
|-
| radix
| 
| 
| 
| 
|-
| strings
| 
| 
| 
| 
|-
| 
| sml
| ocaml
| f#
| haskell
|-
| string type<br />
| string
| string
| string
| String
|-
| string literal<br />
| "Hello, World!"
| "Hello, World!"
| "Hello, World!"
| "Hello, World!"
|-
| newline in literal
| 
| no
| yes
| no
|-
| literal escapes
| \000 \a \b \f \n \r \t \v \040
| \b \n \r \t \" \' \\<br />\ooo \xhh
| \b \n \r\ t \" \' \\<br />\uhhhh \Uhhhhhhhh
| \a \b \f \n \r \t \v \" \& \' \\<br />\oo... \d... \xh...<br /><br />Octal, decimal, and hex escapes denote Unicode characters and can contain anywhere from 1 to 7 digits. The max values are \o4177777, \1114111, and \x10ffff. The \& escape does not represent a character, but can separate a numeric backslash escape sequence from a following digit.
|-
| format string
| 
| 
| sprintf "foo %s %d %.2f" "bar" 7 3.1415
| import Text.Printf<br /><br />printf "foo %s %d %.2f" "bar" 7 3.1415
|-
| concatenate<br />
| "Hello" ^ ", " ^ "World!"
| "Hello" ^ ", " ^ "World!"
| "Hello" + ", " + "World!"
| "Hello" ++ ", " ++ "World!"
|-
| replicate<br />
| 
| String.make 80 '-'
| String.replicate 80 "-"
| concat ( replicate 80 "-" )
|-
| translate case<br />to upper, to lower
| 
| String.uppercase "hello"<br />String.lowercase "HELLO"
| "hello".ToUpper()<br />"HELLO".ToLower()
| import Data.Char<br /><br />map toUpper "hello"<br />map toLower "HELLO"
|-
| capitalize<br />
| 
| String.capitalize "hello"
| 
| 
|-
| trim<br />both sides, left, right
| 
| String.trim " hello "
| " hello ".Trim()<br />" hello".TrimStart()<br />"hello ".TrimEnd()
| 
|-
| pad<br />on left, on right
| 
| 
| "hello".PadLeft(10, ' ')<br />"hello".PadRight(10, ' ')
| 
|-
| number to string
| 
| "two: " ^ string_of_int 2<br />"pi: " ^ float_of_string 3.14
| "two: " + string 2<br />"pi: " + string 3.14
| "two: " ++ (show 2)<br />"pi: " ++ (show 3.14)
|-
| string to number
| Int.toString 3<br />Real.toString 3.14
| 7 + int_of_string "12"<br />73.9 +. float_of_string ".037"
| 7 + int "12"<br />73.9 + float ".037
| 7 + (read "12")::Integer<br />73.9 + (read "0.037")::Double<br />raises exception if string doesn't completely parse
|-
| join<br />
| 
| 
| System.String.Join(" ", ["do"; "re"; "mi"])
| 
|-
| split<br />
| 
| 
| "do re mi".Split(' ')
| 
|-
| character type<br />
| char
| char
| char
| Char
|-
| character literal
| #"h"
| 'h'
| 'h'
| 'h'
|-
| length<br />
| size "hello"
| String.length "hello"
| "hello".Length
| length "hello"
|-
| index of substring
| 
| 
| "hello".IndexOf("hell")
| 
|-
| extract substring
| substring ("hello",0,4)
| String.sub "hello" 0 4
| "hello".Substring(0, 4)
| drop 0 (take 4 "hello")
|-
| extract character
| String.sub ("hello", 0)
| "hello".[0]
| "hello".[0]
| "hello" !! 0
|-
| chr and ord
| ord #"a"<br />chr 97
| Char.code 'a'<br />Char.chr 97
| int 'a'<br />char 97
| Char.ord 'a'<br />Char.chr 97
|-
| dates and time
| 
| 
| 
| 
|-
| 
| sml
| ocaml
| f#
| haskell
|-
| date and time types
| 
| 
| 
| ClockTime CalendarTime TimeDiff
|-
| current date and time
| 
| 
| 
| import Time<br /><br />t <- getClockTime
|-
| current unix epoch
| 
| open Unix;;<br /><br />(* float: *)<br />time();;
| 
| import System.Time<br /><br />getClockTime >>= (\(TOD sec _) -> return sec)
|-
| arrays
| 
| 
| 
| 
|-
| 
| sml
| ocaml
| f#
| haskell
|-
| literal
| 
| 
| 
| 
|-
| size
| 
| 
| 
| 
|-
| lookup
| 
| 
| 
| 
|-
| update
| 
| 
| 
| 
|-
| out-of-bounds
| 
| 
| 
| 
|-
| lists
| 
| 
| 
| 
|-
| 
| sml
| ocaml
| f#
| haskell
|-
| literal
| [1, 2, 3]
| [1; 2; 3]
| [1; 2; 3]
| [1, 2, 3]
|-
| empty list<br />
| 
| []
| 
| []
|-
| empty list test
| 
| let list = [1; 2; 3];;<br /><br />list == []
| 
| let list = [1, 2, 3]<br /><br />list == []<br />null list
|-
| cons<br />
| 1 :: [2, 3]
| 1 :: [2; 3]
| 1 :: [2; 3]
| 1 : [2, 3]
|-
| head<br />
| List.hd [1, 2, 3]
| List.hd [1; 2; 3]
| List.head [1; 2; 3]
| head [1, 2, 3]
|-
| tail<br />
| List.tl [1, 2, 3]
| List.tl [1; 2; 3]
| List.tail [1; 2; 3]
| tail [1, 2, 3]
|-
| head and tail of empty list
| 
| exceptions
| 
| exceptions
|-
| length<br />
| List.length [1, 2, 3]
| List.length [1; 2; 3]
| List.length [1; 2; 3]
| length [1, 2, 3]
|-
| nth element<br />
| List.nth ([1, 2, 3], 0)
| List.nth [1; 2; 3] 0
| List.nth [1; 2; 3] 0
| [1, 2, 3] !! 0
|-
| element index
| 
| 
| 
| import Data.list<br /><br />-- Just 1:<br />elemIndex 8 [7, 8, 9]<br /><br />-- Nothing:<br />elemIndex 10 [7, 8, 9]
|-
| update
| 
| 
| 
| 
|-
| concatenate<br />two lists, list of lists
| [1, 2] @ [3, 4]<br />List.concat [[1, 2], [3, 4]]
| [1; 2] @ [3; 4]<br />List.append [1; 2] [3; 4]<br /><br />List.concat [[1; 2]; [3; 4]]
| [1; 2] @ [3; 4]<br />List.append [1; 2] [3; 4]<br /><br />List.concat [[1; 2]; [3; 4]]
| [1, 2] ++ [3, 4]<br /><br />concat [[1, 2], [3, 4]]
|-
| last<br />and butlast
| 
| 
| 
| last [1, 2, 3]<br />init [1, 2, 3]
|-
| take<br />
| 
| 
| 
| take 2 [1, 2, 3]
|-
| drop<br />
| 
| 
| 
| drop 2 [1, 2, 3]
|-
| iterate
| fun f i = print ((Int.toString i) ^ "\n");<br />List.app f [1, 2, 3];
| let f i =<br />  print_endline (string_of_int i);;<br /><br />List.iter f [1; 2; 3];;
| let f i =<br />  System.Console.WriteLine(string i)<br /><br />List.iter f [1; 2; 3]
| mapM_ print [1, 2, 3]
|-
| reverse<br />
| List.rev [1, 2, 3]
| List.rev [1; 2; 3]
| List.rev [1; 2; 3]
| reverse [1, 2, 3]
|-
| sort
| 
| List.sort min [1; 3; 2; 4]<br />List.sort max [1; 3; 2; 4]
| List.sort [1; 3; 2; 4]
| import Data.List<br /><br />sort [1, 3, 2, 4]
|-
| map
| List.map (fn (x) => x + 2) [1, 2, 3];
| List.map (( * ) 2) [1; 2; 3]
| List.map (( * ) 2) [1; 2; 3]
| map (\x -> x * x) [1, 2, 3]
|-
| filter<br />
| List.filter (fn (x) => x > 2) [1, 2, 3];
| List.filter ((<) 2) [1; 2; 3]
| List.filter ((<) 2) [1; 2; 3]
| filter (\x -> x > 2) [1, 2, 3]
|-
| fold from left
| List.foldl (op +) 0 [1, 2, 3];
| List.fold_left (+) 0 [1; 2; 3]
| List.fold (-) 0 [1; 2; 3]
| foldl (+) 0 [1, 2, 3]
|-
| fold from right<br />
| 
| List.fold_right (-) [1; 2; 3] 0
| List.foldr (op -) 0 [1, 2, 3];
| foldr (-) 0 [1, 2, 3]
|-
| membership<br />
| 
| List.mem 3 [1; 2; 3]
| 
| elem 3 [1, 2, 3]
|-
| universal test<br />
| 
| List.for_all (fun x -> x > 2) [1; 2; 3];;
| List.forall (fun x -> x > 2) [1; 2; 3]
| all (\x -> x > 2) [1, 2, 3]
|-
| existential test<br />
| 
| List.exists (fun x -> x > 2) [1; 2; 3];;
| List.exists (fun x -> x > 2) [1; 2; 3]
| any (\x -> x > 2) [1, 2, 3]
|-
| zip lists
| 
| (* list of tuples *)<br />List.combine [1; 2; 3] ['a'; 'b'; 'c']
| 
| -- list of tuples:<br />zip [1, 2, 3] ['a', 'b', 'c']
|-
| tuples
| 
| 
| 
| 
|-
| 
| sml
| ocaml
| f#
| haskell
|-
| literal
| (1, "hello", true)
| (1, "hello", true)
| (1, "hello", true)
| (1, "hello", True)
|-
| lookup
| #1 (1, "hello", true)
| match (1, "hello", true) with _, x, _ -> x
| match (1, "hello", true) with _, x, _ -> x
| (\(a, _, _) -> a) (1, "hello", True)
|-
| pair lookup
| #1 (12,"December")<br />#2 (12,"December")
| fst (12, "December")<br />snd (12, "December")
| fst (12, "December")<br />snd (12, "December")
| fst (12, "December")<br />snd (12, "December")
|-
| dictionaries
| 
| 
| 
| 
|-
| 
| sml
| ocaml
| f#
| haskell
|-
| functions
| 
| 
| 
| 
|-
| 
| sml
| ocaml
| f#
| haskell
|-
| define function
| fun average a b = ( a + b ) / 2.0;
| let average a b = ( a +. b ) /. 2.0;;
| let average a b = ( a + b ) / 2.0
| average a b = (a + b) / 2.0
|-
| invoke function
| 
| (* 4.5: *)<br />average 1.0 2.0 +. 3.0;;<br /><br />(* 3.0: *)<br />average 1.0 (2.0 +. 3.0);;
| // 4.5:<br />average 1.0 2.0 + 3.0<br /><br />// 3.0:<br />average 1.0 (2.0 + 3.0)
| -- 4.5:<br />average 1 2 + 3<br /><br />-- 3.0:<br />average 1 (2 + 3)<br />average 1 $ 2 + 3
|-
| named parameter
| 
| let subtract ~m ~s = m - s;;<br /><br />subtract ~s: 3 ~m: 7;;
| 
| none
|-
| named parameter default value
| 
| let logarithm ?(base = (exp 1.0)) x = log x /. (log base);;<br /><br />logarithm 2.718;;<br />logarithm ~base: 2.0 10.0;;
| 
| none
|-
| piecewise defined function
| val to_s = fn Red => "red"<br />  | Green => "green"<br />  | Blue => "blue";
| let to_s = function Red -> "red"<br />  | Green -> "green"<br />  | Blue -> "blue";;
| 
| to_s Red = "red"<br />to_s Green = "green"<br />to_s Blue = "blue"
|-
| recursive function
| fun range a b =<br />  if a > b then []<br />  else a :: range (a + 1) b;
| let rec range a b =<br />if a > b then []<br />else a :: range (a+1) b;;
| 
| range a b = if a > b then [] else a : range (a+1) b
|-
| mutually-recursive-functions
| 
| let rec even n = if n = 0 then true else odd (n-1)<br />and odd n = if n = 0 then false else even (n-1);;
| 
| 
|-
| anonymous function
| fn x => fn y => (x + y) / 2.0
| fun x -> fun y -> (x +. y) /. 2.0
| fun x -> fun y -> (x + y) / 2.0
| \x y -> (x+y) / 2.0
|-
| infix operator in prefix position
| (op * ) (3, 4)
| ( * ) 3 4;;
| 
| ( * ) 3 4
|-
| function in infix position
| 
| none
| 
| add x y = x + y<br />3 ‘add` 4
|-
| currying
| un plus x y = x + y;<br />val plus2 = plus 2;<br />plus2 7;
| let plus2 = (+) 2;;
| 
| plus2 = (+) 2
|-
| composition
| 
| 
| 
| f x = x + 2<br />g x = x * 3<br />(f . g ) 4
|-
| function composition operator
| fun double x = 2 * x;<br />val quadruple = double o double;
| none
| 
| double x = 2 * x<br />quadruple x = double . double
|-
| lazy evaluation
| 
| let arg1 x y = x;;<br /><br />arg1 7 (lazy (1/0) );;
| 
| lazy evaluation is default:<br />arg1 x y = x<br /><br />arg1 7 (error "bam!")
|-
| strict evaluation
| 
| default behavior
| default behavior
| arg1 x y = seq y x<br /><br />arg1 7 (error "bam!")
|-
| execution control
| 
| 
| 
| 
|-
| 
| sml
| ocaml
| f#
| haskell
|-
| if
| f x > 0 then<br />  print "pos\n"<br />else<br />  ();
| if x > 0 then<br />  print_endline "pos";;
| if x > 0 then<br />  printfn "pos"
| if x > 0<br />  then putStrLn "pos"<br />  else return ()
|-
| if else-if else
| if x > 0 then print "pos" else if x < 0 then print "neg" else print "zero";
| if x > 0 then<br />  print_endline "pos"<br />else<br />  if x < 0 then<br />    print_endline "neg"<br />  else<br />    print_endline "zero";;
| if x > 0 then<br />  printfn "pos"<br />else<br />  if x < 0 then<br />    printfn "neg"<br />  else<br />    printfn "zero"
| if x > 0<br />  then putStrLn "pos"<br />  else if x < 0<br />    then putStrLn "neg"<br />    else putStrLn "zero"
|-
| sequencing
| 
| print_endline "one";<br />print_endline "two";<br />print_endline "three";;
| printfn "one"<br />printfn "two"<br />printfn "three"
| do<br />  putStrLn "one"<br />  putStrLn "two"<br />  putStrLn "three"
|-
| while
| 
| let i = ref 0;;<br /><br />while !i < 10 do<br />  print_endline (string_of_int !i);<br />  i := !i + 1<br />done;;
| let i = ref 0<br /><br />while !i < 10 do<br />  printfn "%d" !i<br />  i := !i + 1
| 
|-
| for
| 
| for i = 1 to 10 do<br />  let s = string_of_int i in<br />  print_endline s<br />done;;
| 
| 
|-
| for in reverse
| 
| for i = 10 downto 1 do<br />  let s = string_of_int i in<br />  print_endline s<br />done;;
| 
| 
|-
| list iteration
| 
| none
| 
| 
|-
| loop
| 
| let rec loop i =<br />  if i <= 10 then begin<br />    print_endline (string_of_int i);<br />    loop (i+1)<br />  end in<br />loop 0;;
| 
| 
|-
| exceptions
| 
| 
| 
| 
|-
| 
| sml
| ocaml
| f#
| haskell
|-
| raise error
| 
| raise (Failure "bam!");;<br />or<br />failwith "bam!";;
| 
| error "bam!"
|-
| handle error
| 
| let x = try 1 / 0 with Division_by_zero -> 0;;
| 
| 
|-
| type of exceptions
| 
| exn
| 
| 
|-
| user defined exception
| 
| exception Foo of string;;<br />raise (Foo "invalid input");;
| 
| 
|-
| standard exceptions
| 
| Division_by_zero<br />Failure string<br />Not_found<br />Invalid_argument string<br />Match_failure (string, int, int)<br />Assert_failure (string, int, int)<br />Out_of_memory<br />Stack_overflow
| 
| 
|-
| assert
| 
| assert(1 = 0);;
| 
| 
|-
| concurrency
| 
| 
| 
| 
|-
| 
| sml
| ocaml
| f#
| haskell
|-
| file handles
| 
| 
| 
| 
|-
| 
| sml
| ocaml
| f#
| haskell
|-
| standard file handles
| 
| stdin stdout stderr
| stdin stdout stderr
| import System.Posix.IO<br /><br />stdInput stdOutput stdError
|-
| read line from stdin
| 
| let line = read_line();;
| 
| line <- getLine
|-
| end-of-file behavior
| 
| raises End_of_file
| 
| when last data is returned, hIsEOF will return True. Reading after end-of-file throws an exception.
|-
| chomp
| 
| 
| 
| 
|-
| write line to stdout
| 
| print_endline "lorem ipsum";;
| printfn "lorem ipsum"
| putStrLn "lorem ipsum"
|-
| write formatted string to stdout
| 
| 
| 
| 
|-
| open file for reading
| 
| let f = open_in "/etc/passwd";;
| 
| import System.IO<br /><br />f <- openFile "/etc/hosts" ReadMode
|-
| open file for writing
| 
| let f = open_out "/tmp/ocaml.out";;
| 
| import System.IO<br /><br />f <- openFile "/tmp/test" WriteMode
|-
| open file for appending
| 
| 
| 
| import System.IO<br /><br />f <- openFile "/tmp/err.log" AppendMode
|-
| close file
| 
| 
| 
| import System.IO<br /><br />hClose f
|-
| i/o errors
| 
| 
| 
| 
|-
| read line
| fun displayFile(file: string) =<br />  let<br />    val f = TextIO.openIn file<br />    fun iter(s: string option) =<br />    case s of<br />    NONE =><br />      (TextIO.closeIn f)<br />    | SOME(line) =><br />      (print line;<br />      iter(TextIO.inputLine f))<br />  in<br />    iter(TextIO.inputLine f)<br />  end<br />displayFile("/etc/passwd");
| let ic = open_in "/etc/passwd" in<br />let line = input_line ic in<br />print_endline line;;
| 
| import IO<br /><br />readAndPrintLines h = do<br />  eof <- hIsEOF h<br />  if eof<br />    then return ()<br />    else do<br />      line <- hGetLine h<br />      putStrLn line<br />      readAndPrintLines h<br /><br />main = do<br />  h <- openFile "/etc/passwd" ReadMode<br />  readAndPrintLines h
|-
| iterate over file by line
| 
| 
| 
| 
|-
| read file into array of strings
| 
| 
| 
| 
|-
| read file into string
| 
| 
| 
| 
|-
| write string
| 
| 
| 
| 
|-
| write line
| val file = "/tmp/test-sml";<br />val f = TextIO.openOut file;<br />TextIO.output(f, "hello out\n");<br />TextIO.closeOut f;
| open Printf<br />let oc = open_out "/tmp/test-ocaml" in<br />fprintf oc "hello out\n";<br />close_out oc;;
| 
| s = "hello out\n"<br />f = "/tmp/test-haskell"<br />main = writeFile f s
|-
| flush file handle
| 
| 
| 
| 
|-
| end-of-file test
| 
| 
| 
| 
|-
| get and set filehandle position
| 
| 
| 
| 
|-
| files
| 
| 
| 
| 
|-
| 
| sml
| ocaml
| f#
| haskell
|-
| file test, regular file test
| 
| open Unix<br /><br />try Some (stat "/etc/hosts") with<br />  Unix_error (ENOENT, _, _) -> None<br /><br />(stat "/etc/hosts").st_kind = S_REG
| 
| import System<br /><br />Directory.doesFileExist "/etc/hosts"<br /><br />import Control.Monad<br />import System.Posix.Files<br /><br />liftM isRegularFile (getFileStatus "/etc/hosts")
|-
| file size
| 
| (stat "/etc/hosts").st_size
| 
| import Control.Monad<br />import System.Posix.Files<br /><br />liftM fileSize (getFileStatus "/etc/hosts")
|-
| is file readable, writable, executable
| 
| open Unix<br /><br />try access "/tmp/bar" [R_OK]; true with<br />  Unix.Unix_error (EACCES, _, _) -> false;;<br />try access "/tmp/bar" [W_OK]; true with<br />  Unix.Unix_error (EACCES, _, _) -> false;;<br />try access "/tmp/bar" [X_OK]; true with<br />  Unix.Unix_error (EACCES, _, _) -> false;;
| 
| import Control.Monad<br /><br />liftM readable<br />  (getPermissions "/etc/hosts")<br />liftM writable<br />  (getPermissions "/etc/hosts")<br />liftM executable<br />  (getPermissions "/etc/hosts")
|-
| set file permissions
| 
| open Unix<br /><br />chmod "/tmp/foo" 0o755
| 
| import System.Posix.Files<br /><br />setFileMode "/tmp/foo" ownerModes<br />setFileMode "/tmp/foo" groupReadMode<br />setFileMode "/tmp/foo" groupExecuteMode<br />setFileMode "/tmp/foo" otherReadMode<br />setFileMode "/tmp/foo" otherExecuteMode
|-
| copy file, remove file, rename file
| 
| open Unix<br /><br />??<br />unlink "/tmp/foo"<br />rename "/tmp/bar" "/tmp/foo"
| 
| import System.Directory<br /><br />copyFile "/tmp/foo" "/tmp/bar"<br />removeFile "/tmp/foo"<br />renameFile "/tmp/bar" "/tmp/foo"
|-
| create symlink, symlink test, readlink
| 
| open Unix<br /><br />symlink "/etc/hosts" "/tmp/hosts"<br />(lstat "/tmp/hosts").st_kind = S_LNK<br />readlink "/tmp/hosts"
| 
| import System.Posix.Files<br /><br />createSymbolicLink "/etc/hosts" "/tmp/hosts"<br />??<br />readSymbolicLink "/tmp/hosts"
|-
| generate unused file name
| 
| open Filename<br /><br />(* prefix and suffix: *)<br />temp_file "foo" ".txt"
| 
| 
|-
| directories
| 
| 
| 
| 
|-
| 
| sml
| ocaml
| f#
| haskell
|-
| build pathname
| 
| open Filename<br /><br />concat "/etc" "hosts"
| 
| import System.FilePath ((</>))<br /><br />let path = "/etc" </> "hosts"
|-
| dirname and basename
| 
| open Filename<br /><br />dirname "/etc/hosts"<br />basename "/etc/hosts"
| 
| import System.FilePath<br /><br />takeFileName "/etc/hosts"<br />takeDirectory "/etc/hosts"
|-
| iterate over directory by file
| 
| 
| 
| import System<br /><br />-- returns IO [FilePath]<br />Directory.getDirectoryContents "/etc"
|-
| make directory
| 
| (* opam install fileutils *)<br />open FileUtil<br /><br />mkdir ~parent:true "/tmp/foo/bar"
| 
| import System.Directory<br /><br />createDirectoryIfMissing True<br />  "/tmp/foo/bar"
|-
| remove empty directory
| 
| open Unix<br /><br />rmdir "/tmp/foodir"
| 
| import System.Directory<br /><br />removeDirectory "/tmp/foodir"
|-
| remove directory and contents
| 
| 
| 
| import System.Directory<br /><br />removeDirectoryRecursive "/tmp/foodir"
|-
| directory test
| 
| 
| 
| import System<br /><br />Directory.doesDirectoryExist "/tmp"
|-
| temporary directory
| 
| 
| 
| 
|-
| processes and environment
| 
| 
| 
| 
|-
| 
| sml
| ocaml
| f#
| haskell
|-
| command line arguments
| 
| for i = 0 to Array.length Sys.argv - 1 do<br />  print_endline i Sys.argv.(i)<br />done
| 
| import System<br /><br />printArgs args = do<br />  if length args == 0<br />    then return ()<br />    else do<br />      putStrLn (head args)<br />      printArgs (tail args)<br />main = do<br />  a <- getArgs<br />  printArgs a
|-
| program name<br />
| 
| 
| 
| import System<br /><br />s <- getProgName
|-
| getopt
| 
| 
| 
| 
|-
| get and set environment variable<br />
| 
| open Unix<br /><br />s = getenv "HOME"<br />putenv "PATH" "/bin"
| 
| import System.Posix.Env<br /><br />s <- getEnv "HOME"<br />putEnv "PATH=/bin"
|-
| get pid, parent pid
| 
| open Unix<br /><br />let pid = getpid()<br />let ppid = getppid()
| 
| import System.Posix.Process<br /><br />pid <- getProcessID<br />ppid <- getParentProcessID
|-
| get user id and name
| 
| let uid = getuid()<br />let username =<br />  (getpwuid (getuid())).pw_name
| 
| import System.Posix.User<br /><br />uid <- getRealUserID<br />username <- getLoginName
|-
| exit<br />
| 
| exit 0<br /><br />exit 1
| 
| import System.Exit<br /><br />exitWith ExitSuccess<br /><br />to return nonzero status:<br />exitWith (ExitFailure 1)
|-
| set signal handler<br />
| 
| 
| 
| 
|-
| external command<br />
| 
| 
| 
| import System.Cmd<br /><br />rawSystem "ls" ["-l", "/tmp"]
|-
| escaped external command<br />
| 
| 
| 
| 
|-
| backticks<br />
| 
| 
| 
| 
|-
| libraries and namespaces
| 
| 
| 
| 
|-
| 
| sml
| ocaml
| f#
| haskell
|-
| namespace example
| 
| 
| 
| Foo/Bar.hs<br />module Foo.Bar where<br />  data Baz = Baz<br />  say Baz = putStrLn "hello"<br /><br />Main.hs<br />module Main where<br />import Foo.Bar<br />baz = Baz<br />main = say baz<br /><br />to compile and run<br />$ ghc -c Foo/Bar.hs<br />$ ghc Main.hs<br />$ ./Main<br />hello
|-
| namespaces
| 
| 
| 
| values, constructors, type variables, type constructors, type classes, modules
|-
| file name restrictions
| 
| module Foo.Bar must be in Foo.ml
| 
| module Foo.Bar must be in Foo/Bar.hs
|-
| namespace
| 
| open Graphics;;
| 
| import Data.Bytestring
|-
| namespace creation
| 
| put code in file MODULE_NAME.ml
| 
| 
|-
| namespace alias
| 
| module Gr = Graphics;;
| 
| import qualified Data.Bytestring as B
|-
| namespace separator
| 
| .
| 
| .
|-
| subnamespace
| 
| in A.ml:<br />module B =<br />sig<br />  val display_instruction : unit -> unit<br />end =<br />struct<br />  let msg = "attack"<br />  let display_instruction () = print_endline msg<br />end<br />in client source:<br />A.B.display_instruction;;
| 
| 
|-
| package manager setup
| 
| do this once:<br />$ opam init<br /><br />for each shell session:<br />$ eval $(opam config env)
| 
| 
|-
| package manager<br />search; install; list installed
| 
| $ opam search utop<br />$ opam install utop<br />$ opam list --installed
| 
| $ cabal list parsec<br />$ cabal install parsec<br />$ cabal list --installed
|-
| compile app using package
| 
| 
| 
| 
|-
| user-defined types
| 
| 
| 
| 
|-
| 
| sml
| ocaml
| f#
| haskell
|-
| type synonym<br />
| type name = string;
| type name = string;;
| type name = string
| type Name = String
|-
| sum type
| datatype color = Red | Green | Blue;
| type color = Red | Green | Blue;;<br /><br />let col = Red;;<br /><br />(* evaluates to true: *)<br />col < Green;;
| type color = Red | Green | Blue<br /><br />let col = Red<br /><br />// evaluates to true:<br />col < Green
| data Color = Red | Green | Blue<br /><br />col = Red<br /><br />-- this won’t compile:<br />col < Green
|-
| tuple product type with one field
| datatype special_int = SpecialInt of int;<br /><br />val x = SpecialInt 7;
| type special_int = SpecialInt of int;;<br /><br />let n = SpecialInt 7;;
| type special_int = SpecialInt of int<br /><br />let n = SpecialInt 7
| data SpecialIntType = SpecialInt Integer<br /><br />n = SpecialInt 7
|-
| tuple product type with two fields
| datatype int_pair = IntPair of int * int;<br /><br />val y = IntPair (7, 11);
| type int_pair = IntPair of int * int;;<br /><br />let p = IntPair (7, 11);;
| type int_pair = IntPair of int * int<br /><br />let p = IntPair (7, 11)
| data IntPairType = IntPair Integer Integer<br /><br />p = IntPair 7 11
|-
| record product type
| type customer = {id:int, name:string, address:string}
| type customer = {<br />  id: int;<br />  name: string;<br />  address: string<br />};;
| type customer = {<br />  id: int;<br />  name: string;<br />  address: string<br />}
| data CustomerType = Customer {<br />  customerId :: Integer,<br />  name :: String,<br />  address :: String<br />}
|-
| record product type literal
| {id=7, name="John", address="Topeka, KS"}
| let cust = {<br />  id=7;<br />  name="John";<br />  address="Topeka, KS"<br />};;
| {id=7; name="John"; address="Topeka, KS"}
| Customer {<br />  customerId=7,<br />  name="John",<br />  address="Topeka, KS" }
|-
| generic type
| datatype ('a, 'b) twosome =<br />  Twosome of 'a * 'b;<br /><br />val z = Twosome ("pi", 3.14);
| type ('a, 'b) twosome =<br />  Twosome of 'a * 'b;;<br /><br />let p = Twosome ("pi", 3.14);;
| type ('a, 'b) twosome =<br />  Twosome of 'a * 'b<br /><br />let p = Twosome ("pi", 3.14)
| data TwosomeType a b = Twosome a b<br /><br />p = Twosome ("pi", 3.14)
|-
| recursive type
| datatype binary_tree =<br />  Leaf of int<br />  | Tree of binary_tree * binary_tree;
| type binary_tree =<br />  | Leaf of int<br />  | Tree of binary_tree * binary_tree;;
| type binary_tree =<br />  | Leaf of int<br />  | Tree of binary_tree * binary_tree
| data BinaryTree = Leaf Integer | Tree BinaryTree BinaryTree
|-
| pattern match sum type
| val c = Red;<br /><br />case c of Red => "red"<br />  | Blue => "blue"<br />  | Green => "green";
| let col = Red;;<br /><br />let s = match col with<br />  | Red -> "red"<br />  | Blue -> "blue"<br />  | Green -> "green";;
| 
| c = Red<br />case c of Red -> "red"<br />  Green -> "green"<br />  Blue -> "blue"
|-
| pattern match product type
| 
| 
| 
| 
|-
| pattern match guard
| none; use if
| match i with j when i < 0 -> -j | j -> j;;
| 
| none, use if or piecewise function definition
|-
| pattern match catchall
| fun to_s c = case c of Red => "red" | _ => "not red";
| let to_s c = match c with Red -> "red" | _ -> "not red";;<br />to_s Green;;
| 
| c = Green<br />case c of Red -> "red"; _ -> "not red"
|-
| objects
| 
| 
| 
| 
|-
| 
| sml
| ocaml
| f#
| haskell
|-
| class definition
| 
| class counter = object<br />  val mutable n = 0<br />  method incr = n <- n+1<br />  method get = n<br />end;;
| 
| 
|-
| object creation
| 
| let c = new counter;;
| 
| 
|-
| method invocation
| 
| c#incr;;<br />c#get;;
| 
| 
|-
| field access
| 
| none
| 
| 
|-
| inheritance and polymorphism
| 
| 
| 
| 
|-
| 
| sml
| ocaml
| f#
| haskell
|-
| overload function
| 
| 
| 
| 
|-
| inheritance
| 
| 
| 
| 
|-
| net and web
| 
| 
| 
| 
|-
| 
| sml
| ocaml
| f#
| haskell
|-
| unit test
| 
| 
| 
| 
|-
| 
| sml
| ocaml
| f#
| haskell
|-
| debugging and profiling
| 
| 
| 
| 
|-
| 
| sml
| ocaml
| f#
| haskell
|-
| repl
| 
| 
| 
| 
|-
| 
| sml
| ocaml
| f#
| haskell
|-
| invoke repl
| $ sml
| $ ocaml<br /><br />Use this if you want history:<br />$ rlwrap ocaml<br /><br />The utop toplevel, which can be installed via opam, also provides history.
| Mono:<br />$ fsharpi<br /><br />In visual studio, highlight code and press ALT+ENTER.
| $ ghci
|-
| repl limitations
| 
| 
| 
| Must use let to define values and functions; when defining functions with multiple equations the equations must be separated by semicolons; the clauses of case/of statements must be separated by semicolons; it is not possible to define data types.
|-
| repl last value
| it
| none
| it
| it
|-
| help
| 
| none
| 
| :?
|-
| quit
| 
| ^D
| #quit;;
| 
|-
| inspect type
| 
| repl displays the type of any expression entered
| 
| let a = 3<br />:type a
|-
| inspect namespace
| 
| module Unix = Unix;;
| 
| 
|-
| load source file
| use "hello.ml";
| #use "hello";;
| 
| :edit hello.hs<br />:load hello
|-
| load package
| 
| consider adding to .ocamlinit:<br />#use "topfind";;<br /># thread;;<br />#require "core";;<br />open Core.Std;;
| 
| 
|-
| search path
| 
| #directory "libdir";;
| 
| 
|-
| set search path on command line
| 
| ocaml -Ilibdir
| 
| 
|}